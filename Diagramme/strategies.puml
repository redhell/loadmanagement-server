@startuml
!include skin.pu
class FirstComeFirstServeStrategy {
- List<ChargeBox> stoppedDuePenalty
- Map<String,Integer> penaltyMap
- int penalty
+ void optimize()
+ void addLV(ChargeBox)
- boolean stopWithPenalty()
+ void removeLV(ChargeBox)
- void decreaseLoad()
+ boolean calculateFitting(double)
}
abstract class Strategy {
- LoadStrategy loadStrategy
# Anschluss anschluss
# LinkedList<ChargeBox> chargingList
# LinkedList<ChargeBox> suspendedList
# List<ChargeBox> tmpSuspendedList
# double anschlussLoad
+ {abstract}void optimize()
+ {abstract}void addLV(ChargeBox)
+ void removeLV(ChargeBox)
+ boolean calculateFitting(double)
- double readdChargeBox(List<ChargeBox>,List<Boolean>,boolean)
- List<Boolean> runKnapsack(List<ChargeBox>,double)
+ List<Boolean> knapSack(int,int[],int[],int)
+ String printChargingList()
+ String printSuspendedList()
+ String printConsumerList()
+ String printConsumerLoad()
# String getString(List<T>)
# boolean stop(ChargeBox)
# boolean start(ChargeBox)
- boolean queryURL(String)
+ boolean add(ChargeBox)
+ boolean remove(ChargeBox)
# boolean revertStartingIfNeeded(ChargeBox)
}
class FirstInFirstOutStrategy {
+ void optimize()
+ void addLV(ChargeBox)
- void decreaseLoad()
}
class PriorityQueueStrategy {
- LinkedList<ChargeBox> priorityQueue
+ void optimize()
+ void addLV(ChargeBox)
+ boolean add(ChargeBox)
+ boolean remove(ChargeBox)
+ void removeLV(ChargeBox)
+ String printPrioryList()
- void decreaseLoad()
}
class NoneStrategy {
+ void optimize()
+ void addLV(ChargeBox)
+ boolean calculateFitting(double)
}


Strategy <|-- FirstComeFirstServeStrategy
Strategy <|-- FirstInFirstOutStrategy
Strategy <|-- PriorityQueueStrategy
Strategy <|-- NoneStrategy
@enduml