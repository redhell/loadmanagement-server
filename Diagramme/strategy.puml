@startuml
!include skin.pu

abstract class Strategy {
- LoadStrategy loadStrategy
# Anschluss anschluss
# LinkedList<ChargeBox> chargingList
# LinkedList<ChargeBox> suspended
# List<ChargeBox> tmpSuspended
# double anschlussLoad
+ {abstract}void optimize()
+ {abstract}void addLV(ChargeBox)
+ void removeLV(ChargeBox)
+ void calculateFitting(double)
- double readdChargeBox(List<ChargeBox>,List<Boolean>)
- List<Boolean> runKnapsack(List<ChargeBox>,double)
+ List<Boolean> knapSack(int,int[],int[],int)
+ String printChargingList()
+ String printSuspendedList()
+ String printConsumerList()
+ String printConsumerLoad()
- String getString(List<T>)
# boolean stop(ChargeBox)
# boolean start(ChargeBox)
- boolean queryURL(String)
}

class BalancerComponent <<Component>> {
- AnschlussService anschlussService
- InfluxService influxService
- Map<Anschluss,Strategy> anschlussStrategyMap
- ErrorService errorService
+ void triggerBalance()
+ void triggerCheckConnected()
# void checkConnected(Anschluss)
# void balance(Anschluss)
- void updateConsumer(Consumer)
- void updateChargeBox(ChargeBox)
}

class InfluxService << Service >>

class InfluxService <<Service>>
interface AnschlussService
interface ErrorService

Strategy <|-- FirstComeFirstServeStrategy
Strategy <|-- FirstInFirstOutStrategy
Strategy <|-- PriorityQueueStrategy

BalancerComponent --> AnschlussService
BalancerComponent --> InfluxService
BalancerComponent --> ErrorService

BalancerComponent -l-> Strategy
@enduml